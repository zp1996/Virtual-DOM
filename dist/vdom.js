var vdom = (function () {
'use strict';

const RE = /\[object\s|\]/g;
const util = {};

const setStyle = obj => {
    let res = '';
    for (let key in obj) {
        res += `${key}: ${obj[key]};`;
    }
};

util.type = obj => Object.prototype.toString.call(obj).replace(RE, "");

util.each = (arr, fn) => {
    for (let i = 0, len = arr.length; i < len; i++) {
        fn(arr[i], i);
    }
};

util.each(['String', 'Array', 'Object'], (val) => {
    util[`is${val}`] = obj => util.type(obj) === val;
});

util.setAttr = (ele, attr, val) => {
    switch (attr) {
        case 'style':
            ele.style.cssText = setStyle(val);
            break;
        case 'value':
            const { tagName } = ele;
            if (tagName === 'textarea') {
                ele.innerText = val;
            } else {
                ele.setAttribute(attr, val);
            }
            break;
        default:
            ele.setAttribute(attr, val);
    }
};

var util_1 = util;

const { isArray, setAttr, each } = util_1;

class Element {
    constructor(tagName, props, children = []) {
        if (isArray(props)) {
            children = props;
            props = {};
        }
        this.tagName = tagName;
        this.props = props || {};
        this.children = children;
        // 统计子节点个数,用于后面利用前序遍历进行diff生成opatches的过程
        let count = 0;
        each(children, (child, i) => {
            if (child instanceof Element) {
                count += child.count;
            } else {
                children[i] = child + '';
            }
            count++;
        });
        this.count = count;
    }
    render() {
        // 利用递归将内存中的树形结构渲染到页面上
        const ele = document.createElement(this.tagName);
        // 添加节点属性
        for (let prop in this.props) {
            setAttr(ele, prop, this.props[prop]);
        }
        for (let i = 0, child; child = this.children[i++];) {
            const childEle = (child instanceof Element) ?
                child.render() :
                document.createTextNode(child);
            ele.appendChild(childEle);
        }
        return ele;
    }
}

// 获取需要进行比对的键的值
const getItemKey = (item, key) => {
    if (!item || !key) return void 0;
    return typeof key === 'string' ? item[key] : key(item);
};
/*
 * 提取数组
 * keyIndex 拥有该键的元素hash,键为key对应的值,值为在数组中的索引
 * free 无该键的元素集合
*/
const makeKeyIndexAndFree = (list, key) => {
    const keyIndex = {}, free = [];
    for (let i = 0, item; item = list[i++];) {
        const itemKey = getItemKey(item, key);
        if (itemKey) {
            keyIndex[itemKey] = i - 1;
        } else {
            free.push(item);
        }
    }
    return { keyIndex, free };
};
/*
 * 更改老的数组使其与新的数组保持一致
 * type: 0 为删除, 1 为新增
 */
const remove = index => ({
    index,
    type: 0
});
const insert = (index, item) => ({
    index,
    item,
    type: 1
});
// diff比较,只比一层
var listDiff = (oldList, newList, key) => {
    const oldMap = makeKeyIndexAndFree(oldList, key),
        newMap = makeKeyIndexAndFree(newList, key),
        newFree = newMap.free,
        oldKeyIndex = oldMap.keyIndex,
        newKeyIndex = newMap.keyIndex,
        moves = [],
        children = [];
    let freeIndex = 0, itemKey, item;
    // 遍历老的数组
    for (let i = 0, item; item = oldList[i++];) {
        itemKey = getItemKey(item, key);
        if (itemKey) {
            if (!newKeyIndex.hasOwnProperty(itemKey)) {
                // 假如新的数组中没有,则这个元素应该被删除
                children.push(null);
            } else {
                children.push(
                    newList[newKeyIndex[itemKey]]
                );
            }
        } else {
            // 假如元素没有key这个键,则把新的数组中没有这个键的元素加上去
            const freeItem = newFree[freeIndex++] || null;
            children.push(freeItem);
        }
    }
    const simulateList = children.slice(0);
    let i = 0;
    // 新的数组中不存在该元素,则删除
    while (i < simulateList.length) {
        if (simulateList[i] === null) {
            moves.push(remove(i));
            simulateList.splice(i, 1);
        } else {
            i++;
        }
    }
    let j = 0;
    const newLen = newList.length;
    for (let i = 0; i < newLen; i++) {
        item = newList[i];
        itemKey = getItemKey(item, key);
        const simulateItem = simulateList[j],
            simulateItemKey = getItemKey(simulateItem, key);
        if (simulateItem) {
            if (itemKey === simulateItemKey) {
                // 此处节点不需要移动
                j++;
            } else {
                if (!oldKeyIndex.hasOwnProperty(simulateItemKey)) {
                    moves.push(insert(i, item));
                } else {
                    const nextItemKey = getItemKey(simulateList[j + 1], key);
                    if (nextItemKey === itemKey) {
                        // 假设在老的数组中的下一个位置,则把该位置元素删除
                        moves.push(remove(i));
                        simulateList.splice(j++, 1);
                    } else {
                        moves.push(insert(i, item));
                    }
                }
            }
        } else {
            // 插入新增的元素
            moves.push(insert(i, item));
        }
    }
    // 删除老的数组中多余的元素
    let k = 0;
    while (k++ <= simulateList.length - 1 - j) {
        moves.push(remove(newLen));
    }
    return { moves, children };
};

const { each: each$2, isString: isString$1, isObject, setAttr: setAttr$1 } = util_1;

// 根据patches数组来改变真实的dom
const REPLACE = 0;
const PROPS = 1;
const REORDER = 2;
const TEXT = 3;

const currentPatchArr = [
    (node, currentPatch) => {
        const childNode = currentPatch.node;
        const newNode = isString$1(childNode) ?
            document.createTextNode(childNode) :
            node.render();
        node.parentNode.replaceChild(newNode, childNode);
    },
    (node, currentPatch) => {
        const { props } = currentPatch;
        for (let key in props) {
            if (props[key] == null) {
                node.removeAttribute(key);
            } else {
                setAttr$1(node, key, props[key]);
            }
        }
    },
    (node, currentPatch) => {
        const { moves } = currentPatch,
            nodeList = Array.prototype.slice.call(node.childNodes);
        let map = {};
        each$2(nodeList, node => {
            // 为了复用节点
            if (node.nodeType === 1) {
                const key = node.getAttribute('key');
                if (key) {
                    map[key] = node;
                }
            }
        });
        each$2(moves, move => {
            const { index, type, item } = move;
            if (type === 0) {
                node.removeChild(node.childNodes[index]);
                nodeList.splice(index, 1);
            } else {
                const { key } = item;
                const insertNode = map[key] ?
                    map[key] :
                    isObject(item) ?
                        item.render() :
                        document.createTextNode(item);
                nodeList.splice(index, 0, insertNode);
                node.insertBefore(insertNode, node.childNodes[index]);
            }
        });
        map = null;
    },
    (node, currentPatch) => {
        node.nodeValue = currentPatch.content;
    }
];

const applyPatches = (node, currentPatches) => {
    each$2(currentPatches, (currentPatch) => {
        currentPatchArr[currentPatch.type](node, currentPatch);
    });
};

// 利用DFS遍历整颗树
const dfsWalk$1 = (node, walker, patches) => {
    const currentPatches = patches[walker.index],
        children = node.childNodes || [];
    for (let i = 0, child; child = children[i++];) {
        walker.index++;
        dfsWalk$1(child, walker, patches);
    }
    if (currentPatches) {
        applyPatches(node, currentPatches);
    }
};

const patch = (node, patches) => {
    const walker = { index: 0 };
    dfsWalk$1(node, walker, patches);
};

const { isString, each: each$1 } = util_1;

// 比较节点属性(就是比较两个对象的差异)
const diffProps = (oldNode, newNode) => {
    const propsPatches = {};
    let count = 0, key, val;
    const oldProps = oldNode.props,
        newProps = newNode.props;
    // 找出属性中变化的项
    for (key in oldProps) {
        val = oldProps[key];
        if (newProps[key] !== val) {
            count++;
            propsPatches[key] = newProps[key];
        }
    }
    // 添加新的属性
    for (key in newProps) {
        if (
            newProps.hasOwnProperty(key) &&
            !oldProps.hasOwnProperty(key)
        ) {
            count++;
            propsPatches[key] = newProps[key];
        }
    }
    return count === 0 ? null : propsPatches;
};

const diffChildren = (oldChildren, newChildren, index, patches, currentPatch) => {
    // 根据每一个节点的key属性来进行判断,两个节点是否相等
    const diffs = listDiff(oldChildren, newChildren, 'key');
    newChildren = diffs.children;
    // 先将节点的子节点整理
    if (diffs.moves.length) {
        const reorderPatch = {
            type: REORDER,
            moves: diffs.moves
        };
        currentPatch.push(reorderPatch);
    }
    // 而后利用递归比较每一个子节点的子节点
    let leftNode = null,
        currentNodeIndex = index;
    each$1(oldChildren, (child, i) => {
        currentNodeIndex += (leftNode && leftNode.count) ?
            leftNode.count + 1 : 1;
        dfsWalk(child, newChildren[i], currentNodeIndex, patches);
        leftNode = child;
    });
};
/*
 * 利用前序遍历的方式遍历整颗树
 * diff过程先对上层进行整理,而后在对象下层节点进行比较
 * 而patches的过程正相反,先对下层节点进行中整理,而后再对上层节点进行改变
 * 返回的patch为一个对象,索引值对应的是如何更改相应节点的子节点(索引值遵循前序遍历的方式)
 */
const dfsWalk = (oldNode, newNode, index, patches) => {
    const currentPatch = [];
    if (newNode == null) {

    } else if (isString(oldNode) && isString(newNode)) {
        oldNode !== newNode && currentPatch.push({
            type: TEXT,
            content: newNode
        });
    } else if (
        oldNode.tagName === newNode.tagName &&
        oldNode.key === newNode.key
    ) {
        // 节点未发生变化,比较其属性以及子节点是否变化
        const propsPatches = diffProps(oldNode, newNode);
        if (propsPatches) {
            currentPatch.push({
                type: PROPS,
                props: propsPatches
            });
        }
        diffChildren(
            oldNode.children,
            newNode.children,
            index,
            patches,
            currentPatch
        );
    } else {
        // 节点类型发生了改变,不用比较直接替换
        currentPatch.push({
            type: REPLACE,
            node: newNode
        });
    }
    currentPatch.length && (patches[index] = currentPatch);
};

/*
 * 对两棵树进行对比,生成patches
 * 利用patches来最小化的更改dom
 */
const diff = (oldTree, newTree) => {
    const patches = {};
    dfsWalk(oldTree, newTree, 0, patches);
    return patches;
};

var index = {
    Element,
    diff,
    patch
};

return index;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
